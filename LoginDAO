import java.io.FileInputStream;
import java.sql.*;
import java.util.Properties;

public class LoginDAO {
    private static Connection connection;

    public LoginDAO() throws Exception {
        Class.forName("com.mysql.cj.jdbc.Driver");
        Properties props = new Properties();
        props.load(new FileInputStream("C:\\Users\\Rachel\\IdeaProjects\\FitnessApp\\src\\sql.properties"));

        String user = props.getProperty("user");
        String password = props.getProperty("password");
        String dburl = props.getProperty("dburl");

        connection = DriverManager.getConnection(dburl, user, password);

        System.out.println("DB connection successful to: " + dburl);
    }

    public boolean validateEnthusiast (String username, String password) {
        String query = "SELECT * FROM fitness.enthusiast WHERE username=? AND password=?";
        try(PreparedStatement ps = connection.prepareStatement(query)) {
            ps.setString(1, username);
            ps.setString(2, password);
            try(ResultSet rs = ps.executeQuery()) {
                if(rs.next()){
                    return true;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public boolean validateTrainer (String username, String password) {
        String query = "SELECT * FROM fitness.trainers WHERE username=? AND password=?";
        try(PreparedStatement ps = connection.prepareStatement(query)) {
            ps.setString(1, username);
            ps.setString(2, password);
            try(ResultSet rs = ps.executeQuery()) {
                if(rs.next()){
                    return true;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public boolean validateAdmins (String username, String password) {
        String query = "SELECT * FROM fitness.admins WHERE username=? AND password=?";
        try(PreparedStatement ps = connection.prepareStatement(query)) {
            ps.setString(1, username);
            ps.setString(2, password);
            try(ResultSet rs = ps.executeQuery()) {
                if(rs.next()){
                    return true;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public void createEnthusiast (Users enthusiast) {
        String query = "INSERT INTO fitness.enthusiast (username, password) values (?, ?)";
        try(PreparedStatement ps = connection.prepareStatement(query)) {
            ps.setString(1, enthusiast.getUsername());
            ps.setString(2, enthusiast.getPassword());
            ps.executeUpdate();
            System.out.println("Enthusiast account created");
    } catch (SQLException e) {
        e.printStackTrace();}
    }

    public void createTrainer (Users trainer) {
        String query = "INSERT INTO fitness.trainers (username, password) values (?, ?)";
        try(PreparedStatement ps = connection.prepareStatement(query)) {
            ps.setString(1, trainer.getUsername());
            ps.setString(2, trainer.getPassword());
            ps.executeUpdate();
            System.out.println("Trainer account created");
        } catch (SQLException e) {
            e.printStackTrace();}
    }

    public void createAdmin (Users admin) {
        String query = "INSERT INTO fitness.admins (username, password) values (?, ?)";
        try(PreparedStatement ps = connection.prepareStatement(query)) {
            ps.setString(1, admin.getUsername());
            ps.setString(2, admin.getPassword());
            ps.executeUpdate();
            System.out.println("Admin account created");
        } catch (SQLException e) {
            e.printStackTrace();}
    }

    public boolean duplicateEnthusiast (String username) {
        String query = "SELECT * FROM fitness.enthusiast WHERE username=?";
        try(PreparedStatement ps = connection.prepareStatement(query)) {
            ps.setString(1, username);
            try(ResultSet rs = ps.executeQuery()) {
                if(rs.next()){
                    return true;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public boolean duplicateTrainer (String username) {
        String query = "SELECT * FROM fitness.trainers WHERE username=?";
        try(PreparedStatement ps = connection.prepareStatement(query)) {
            ps.setString(1, username);
            try(ResultSet rs = ps.executeQuery()) {
                if(rs.next()){
                    return true;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public boolean duplicateAdmin (String username) {
        String query = "SELECT * FROM fitness.admins WHERE username=?";
        try(PreparedStatement ps = connection.prepareStatement(query)) {
            ps.setString(1, username);
            try(ResultSet rs = ps.executeQuery()) {
                if(rs.next()){
                    return true;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public boolean changePassword (String username,String oldPassword,
                                   String confirmPassword) throws Exception {
       String validateQuery = "SELECT * FROM enthusiast WHERE username=? AND password=?";
       try(PreparedStatement validateStmt = connection.prepareStatement(validateQuery)){
           validateStmt.setString(1, username);
           validateStmt.setString(2, oldPassword);
           ResultSet rs = validateStmt.executeQuery();
           if(!rs.next()){
               System.out.println("Current password is incorrect");
               return false;
           }
       }

       String updateQuery = "UPDATE enthusiast SET password=? WHERE username=?";
       try(PreparedStatement updateStmt = connection.prepareStatement(updateQuery)){
           updateStmt.setString(1, confirmPassword);
           updateStmt.setString(2, username);
           System.out.println("Password updated");
        } catch (SQLException e) {
           System.out.println("Failed to update password: " + e.getMessage());
       }
       return true;
    }
    }
